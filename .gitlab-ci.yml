stages:
  - tests
  - build
  - deploy
  
variables:
  BUILDVERSION: ${CI_PIPELINE_ID}

.test:
  image: rnds/ruby:3.0-test
  stage: tests
  variables:
    COMPOSE_PROJECT_NAME: bbkutils_${CI_PIPELINE_ID}_${CI_JOB_ID}
    GIT_BRANCH: ${CI_COMMIT_REF_NAME}
    GIT_COMMIT: ${CI_COMMIT_SHA}
  script:
    - docker-compose build --force-rm --pull test-${CASE}
    - docker-compose up --force-recreate -t 1 --remove-orphans -d test-${CASE}
    - docker-compose exec -T test-${CASE} rspec | tee .coverage
    - docker-compose exec -T test-${CASE} cat rspec.xml > rspec-${CASE}.xml
  after_script:
    - docker-compose down -v --remove-orphans
  coverage: '/\(\d+.\d+\%\) covered/'
  artifacts:
    reports:
      junit: rspec*.xml
    name: "coverage"
    paths:
      - .coverage
      - coverage

ruby-2.5:
  extends: .test
  variables:
    CASE: '2.5'

ruby-3.0:
  extends: .test
  variables:
    CASE: '3.0'
  
build:
  image: rnds/ruby:3.0-test
  stage: build
  script:
    - bundle install --jobs=3 --path vendor/bundle && bundle package --all
    - gem build `ls | grep gemspec` && gem install `ls | grep -e '.gem$'` 
  cache:
    paths:
      - vendor/bundle
      - vendor/cache
  artifacts:
    name: "gem"
    paths:
      - ./*.gem
      - coverage/*
      - rubycritic/*

# pushgem:
#   image: rnds/ruby:3.0-test
#   stage: deploy
#   script:
#     - mkdir -p ~/.gem
#     - 'echo ":rubygems_api_key: ${RUBYGEMS_KEY}" > ~/.gem/credentials'
#     - chmod 600 ~/.gem/credentials
#     - export GEMFILE=`ls *.gem | tail -n 1`
#     - gem push $GEMFILE
#   only:
#     - master
#     - /^v\d$/
#     - /^v\d\.\d$/

badges:
  image: rnds/ruby:3.0-test
  stage: deploy
  allow_failure: true
  variables:
    BRANCH_LOCK: ci/${CI_PROJECT_NAME}/${CI_COMMIT_REF_SLUG}
    ENV_LOCK: ci/${CI_PROJECT_NAME}/${CI_ENVIRONMENT_SLUG}
    BADGES: https://lysander.rnds.pro/api/v1/badges/bbkutils
  script:
    - bundle audit update
    - bundle audit || true
    - bundle outdated --only-explicit --no-pre --group default || true

    - vulnerable=$(bundle audit | grep "Name:" | sort | uniq | wc -l) || true
    - outdated=$(bundle outdated --only-explicit --no-pre --group default | grep "*" | wc -l) || true
    - quality=$(rubycritic -f lint lib | tail -n 1 | cut -d ' ' -f2) || true
    - coverage=$(cat .coverage | ruby -e 'puts /\((\d+.\d+)\%\) covered/.match(STDIN.read)[1]') || true

    - curl -X PUT --oauth2-bearer ${BADGE_TOKEN} "${BADGES}_vulnerable.json?badge[message]=$(bundle audit | grep "Name:" | sort | uniq | wc -l)%20gems" || true
    - curl -X PUT --oauth2-bearer ${BADGE_TOKEN} "${BADGES}_outdated.json?badge[message]=$(bundle outdated --only-explicit --no-pre --group default | grep "*" | wc -l)%20gems" || true
    - curl -X PUT --oauth2-bearer ${BADGE_TOKEN} "${BADGES}_quality.json?badge[message]=$(rubycritic -f lint lib | tail -n 1 | cut -d ' ' -f2)%25" || true
    - curl -X PUT --oauth2-bearer ${BADGE_TOKEN} "${BADGES}_coverage.json?badge[message]=$(cat .coverage | ruby -e 'puts /\((\d+.\d+)\%\) covered/.match(STDIN.read)[1]')%25" || true
  only: 
   - master
